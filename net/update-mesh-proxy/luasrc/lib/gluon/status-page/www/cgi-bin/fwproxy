#!/usr/bin/env lua

local os = require('os')
local io = require('io')
local uci = require('simple-uci').cursor()

local BUFF_SIZE = 65536

-- TODO: Exit immediately if another proxy process is still running

local query = os.getenv('QUERY_STRING')

if not query then
	return
end

local attrs = {}

for kvpair in query:gmatch('[^&]+') do
	local iter = kvpair:gmatch('[^=]+')
	attrs[iter()] = iter()
end

local function shell_escape(str)
	-- Try to make sure nobody can escape from double quoted string
	return str:gsub('\\', ''):gsub('"', '\\"')
end

local function wget(url)
	local cmdline = string.format('wget -q -O - "%s"', shell_escape(url))

	local proc = io.popen(cmdline)


	local buff
	local function wget_read()
		buff = proc:read(BUFF_SIZE)
		return buff
	end

	while wget_read() do
		io.write(buff)
	end

	proc:close()
end

local function wget_exists(url)
	local cmd = string.format('wget -s -q "%s"', shell_escape(url))
	return os.execute(cmd)
end

if not attrs['type'] then
	error('Missing type')
end

if not attrs['branch'] then
	error('Missing branch')
end

if not attrs['file'] then
	error('Missing file')
end

local type = attrs['type']
local branch_name = attrs['branch']
local file = attrs['file']

print('Access-Control-Allow-Origin: *')
if type == 'manifest' then
	print('Content-type: application/json')
else
	print('Content-type: application/octet-stream')
end
print('')



if not uci:load('autoupdater') then
	error('Failed to load autoupdater config')
end

local branches = {}

uci:foreach('autoupdater', 'branch', function(branch)
	local mirrors = {}
	for _,v in ipairs(branch.mirror) do
		table.insert(mirrors, v)
	end
	branches[branch['.name']] = mirrors
end)

local branch = branches[branch_name]

if not branch then
	error('Unknown branch')
end

math.randomseed(os.time())

local mirror

while #branch > 0 do
	local i = math.random(#branch)
	mirror = branch[i]
	table.remove(branch, i)

	local url = mirror..file
	if wget_exists(url) == 0 then
		wget(url)
		break
	end
end
